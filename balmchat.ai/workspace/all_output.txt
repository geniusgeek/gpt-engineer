Core classes, functions, and methods:

1. Backend (Node.js)
   - server.js: Entry point for the backend, sets up the server and routes
   - chatController.js: Handles chat-related logic and communication with the frontend
   - therapist.js: Contains the logic for the chatbot to behave like a therapist

2. Frontend (React.js)
   - index.js: Entry point for the frontend, renders the main App component
   - App.js: Main component that contains the chat interface and state management
   - Chat.js: Component for rendering the chat interface and handling user input
   - Message.js: Component for rendering individual messages in the chat

Now, let's create the files with the necessary code:

```server.js
const express = require('express');
const cors = require('cors');
const chatController = require('./chatController');

const app = express();
app.use(cors());
app.use(express.json());

app.post('/api/chat', chatController.processMessage);

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
```

```chatController.js
const Therapist = require('./therapist');

const therapist = new Therapist();

exports.processMessage = (req, res) => {
  const message = req.body.message;
  const response = therapist.getResponse(message);
  res.json({ response });
};
```

```therapist.js
class Therapist {
  getResponse(message) {
    // Implement the logic for the chatbot to behave like a therapist
    // For simplicity, we will return a hardcoded response for now
    return "I'm here to help you. Tell me more about your concerns.";
  }
}

module.exports = Therapist;
```

```index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import './index.css';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
```

```App.js
import React, { useState } from 'react';
import Chat from './Chat';
import './App.css';

function App() {
  const [messages, setMessages] = useState([]);

  const addMessage = (message) => {
    setMessages([...messages, message]);
  };

  return (
    <div className="App">
      <Chat messages={messages} addMessage={addMessage} />
    </div>
  );
}

export default App;
```

```Chat.js
import React, { useState } from 'react';
import Message from './Message';
import './Chat.css';

function Chat({ messages, addMessage }) {
  const [input, setInput] = useState('');

  const sendMessage = async (e) => {
    e.preventDefault();
    addMessage({ sender: 'user', content: input });
    setInput('');

    const response = await fetch('/api/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message: input }),
    });
    const data = await response.json();
    addMessage({ sender: 'therapist', content: data.response });
  };

  return (
    <div className="Chat">
      <div className="messages">
        {messages.map((message, index) => (
          <Message key={index} message={message} />
        ))}
      </div>
      <form onSubmit={sendMessage}>
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Type your message..."
        />
        <button type="submit">Send</button>
      </form>
    </div>
  );
}

export default Chat;
```

```Message.js
import React from 'react';
import './Message.css';

function Message({ message }) {
  return (
    <div className={`Message ${message.sender}`}>
      <p>{message.content}</p>
    </div>
  );
}

export default Message;
```

```index.css
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
```

```App.css
.App {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #f5f5f5;
}
```

```Chat.css
.Chat {
  display: flex;
  flex-direction: column;
  width: 400px;
  height: 600px;
  border: 1px solid #ccc;
  border-radius: 5px;
  background-color: #fff;
}

.messages {
  flex: 1;
  overflow-y: auto;
  padding: 10px;
}

form {
  display: flex;
  padding: 10px;
  border-top: 1px solid #ccc;
}

input {
  flex: 1;
  border: none;
  outline: none;
  padding: 5px;
}

button {
  background-color: #007bff;
  color: #fff;
  border: none;
  padding: 5px 10px;
  border-radius: 5px;
  cursor: pointer;
}
```

```Message.css
.Message {
  margin-bottom: 10px;
}

.Message.user {
  align-self: flex-end;
  background-color: #007bff;
  color: #fff;
  border-radius: 5px;
  padding: 5px 10px;
}

.Message.therapist {
  align-self: flex-start;
  background-color: #f5f5f5;
  color: #333;
  border-radius: 5px;
  padding: 5px 10px;
}
```

To run the application locally, follow these steps:

1. Install Node.js and npm if you haven't already.
2. Create a new directory for your project and navigate to it in the terminal.
3. Run `npm init` to create a package.json file.
4. Install the necessary dependencies: `npm install express cors`.
5. Create the backend files (server.js, chatController.js, therapist.js) and add the provided code.
6. Run the backend with `node server.js`.
7. In a new terminal, navigate to the project directory and create a new React app with `npx create-react-app frontend`.
8. Replace the frontend/src files (index.js, App.js, Chat.js, Message.js) with the provided code.
9. Install Tailwind CSS with `npm install tailwindcss`.
10. Run the frontend with `npm start`.
11. Open your browser and go to http://localhost:3000 to see the chatbot in action.